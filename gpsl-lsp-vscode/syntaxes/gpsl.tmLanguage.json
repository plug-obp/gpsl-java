{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "GPSL",
  "scopeName": "source.gpsl",
  "patterns": [
    { "include": "#comments" },
    { "include": "#atoms" },
    { "include": "#automaton-declaration" },
    { "include": "#formula-declaration" },
    { "include": "#keywords" },
    { "include": "#operators" },
    { "include": "#literals" },
    { "include": "#identifiers" },
    { "include": "#numbers" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.gpsl",
          "match": "//.*$"
        },
        {
          "name": "comment.block.gpsl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "automaton-declaration": {
      "patterns": [
        {
          "name": "meta.automaton.gpsl",
          "begin": "\\b(nfa|buchi)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.control.automaton.type.gpsl" }
          },
          "end": "(?<=;)",
          "patterns": [
            { "include": "#automaton-keywords" },
            { "include": "#formula" },
            { "include": "#identifiers" },
            { "include": "#numbers" },
            { "include": "#punctuation" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "automaton-keywords": {
      "patterns": [
        {
          "name": "keyword.control.automaton.gpsl",
          "match": "\\b(states|initial|accept)\\b"
        }
      ]
    },
    "formula-declaration": {
      "patterns": [
        {
          "name": "meta.declaration.gpsl",
          "begin": "\\b([a-zA-Z][a-zA-Z_0-9]*)\\s*(\\*?=)",
          "beginCaptures": {
            "1": { "name": "entity.name.function.gpsl" },
            "2": { "name": "keyword.operator.assignment.gpsl" }
          },
          "end": "(?=\\b[a-zA-Z][a-zA-Z_0-9]*\\s*\\*?=|$)",
          "patterns": [
            { "include": "#formula" }
          ]
        }
      ]
    },
    "formula": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#let-expression" },
        { "include": "#automaton-declaration" },
        { "include": "#atoms" },
        { "include": "#literals" },
        { "include": "#temporal-operators" },
        { "include": "#logical-operators" },
        { "include": "#identifiers" },
        { "include": "#numbers" },
        { "include": "#punctuation" }
      ]
    },
    "let-expression": {
      "patterns": [
        {
          "comment": "Multiline let expression - let followed by newline",
          "name": "meta.let.multiline.gpsl",
          "begin": "\\b(let|\\\\)\\b(?=\\s*$)",
          "beginCaptures": {
            "1": { "name": "keyword.control.let.multiline.gpsl" }
          },
          "end": "\\b(in)\\b",
          "endCaptures": {
            "1": { "name": "keyword.control.in.multiline.gpsl" }
          },
          "patterns": [
            { "include": "#formula-declaration" },
            { "include": "#formula" }
          ]
        },
        {
          "comment": "Inline let expression - let on same line as bindings",
          "name": "meta.let.inline.gpsl",
          "begin": "\\b(let|\\\\)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.control.let.inline.gpsl" }
          },
          "end": "\\b(in)\\b",
          "endCaptures": {
            "1": { "name": "keyword.control.in.inline.gpsl" }
          },
          "patterns": [
            { "include": "#formula-declaration" },
            { "include": "#formula" }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.gpsl",
          "match": "\\b(let|in)\\b"
        },
        {
          "name": "keyword.control.automaton.type.gpsl",
          "match": "\\b(nfa|buchi)\\b"
        },
        {
          "name": "keyword.control.automaton.gpsl",
          "match": "\\b(states|initial|accept)\\b"
        }
      ]
    },
    "temporal-operators": {
      "patterns": [
        {
          "name": "keyword.operator.temporal.unary.gpsl",
          "match": "\\b(next|N|globally|always|G|eventually|F)\\b|◯|☐|♢|\\u25C7|\\u2610|o|X|\\(\\)|\\[\\]|<>"
        },
        {
          "name": "keyword.operator.temporal.binary.gpsl",
          "match": "\\b(until|U|SU|strong-until|W|WU|weak-until|M|SR|strong-release|R|WR|weak-release)\\b"
        }
      ]
    },
    "logical-operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.negation.gpsl",
          "match": "\\b(not)\\b|[!~]"
        },
        {
          "name": "keyword.operator.logical.conjunction.gpsl",
          "match": "\\b(and)\\b|&{1,2}|/\\\\|\\*|∧"
        },
        {
          "name": "keyword.operator.logical.disjunction.gpsl",
          "match": "\\b(or)\\b|\\|{1,2}|\\\\\\/|\\+|∨"
        },
        {
          "name": "keyword.operator.logical.xor.gpsl",
          "match": "\\b(xor)\\b|\\^|⊻|⊕"
        },
        {
          "name": "keyword.operator.logical.implication.gpsl",
          "match": "\\b(implies)\\b|->|=>|→|⟹"
        },
        {
          "name": "keyword.operator.logical.equivalence.gpsl",
          "match": "\\b(iff)\\b|<->|<=>|⟺|↔"
        }
      ]
    },
    "operators": {
      "patterns": [
        { "include": "#temporal-operators" },
        { "include": "#logical-operators" }
      ]
    },
    "atoms": {
      "patterns": [
        {
          "name": "string.quoted.pipe.gpsl",
          "begin": "\\|(?![|\\s])",
          "end": "\\|",
          "patterns": [
            {
              "name": "constant.character.escape.gpsl",
              "match": "\\\\\\|"
            }
          ]
        },
        {
          "name": "string.quoted.double.gpsl",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.gpsl",
              "match": "\\\\\""
            }
          ]
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.language.boolean.gpsl",
          "match": "\\b(true|false|0|1)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.gpsl",
          "match": "\\b[a-zA-Z][a-zA-Z_0-9]*\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.gpsl",
          "match": "\\b[0-9]+\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma.gpsl",
          "match": ","
        },
        {
          "name": "punctuation.terminator.semicolon.gpsl",
          "match": ";"
        },
        {
          "name": "punctuation.brackets.square.gpsl",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.brackets.round.gpsl",
          "match": "[\\(\\)]"
        }
      ]
    }
  }
}
